/* eslint-disable */
/* prettier-ignore */
// Generated by elegant-router
// Read more: https://github.com/soybeanjs/elegant-router

declare module "@elegant-router/types" {
  type ElegantConstRoute = import('@elegant-router/vue').ElegantConstRoute;

  /**
   * route layout
   */
  export type RouteLayout = "base" | "blank" | "bg";

  /**
   * route map
   */
  export type RouteMap = {
    "root": "/";
    "not-found": "/:pathMatch(.*)*";
    "exception": "/exception";
    "exception_403": "/exception/403";
    "exception_404": "/exception/404";
    "exception_500": "/exception/500";
    "document": "/document";
    "document_project": "/document/project";
    "document_project-link": "/document/project-link";
    "403": "/403";
    "404": "/404";
    "500": "/500";
    "home": "/home";
    "iframe-page": "/iframe-page/:url";
    "login": "/login/:module(pwd-login|code-login|register|reset-pwd|bind-wechat)?";
    "ride": "/ride";
    "ride_carpool": "/ride/carpool";
    "ride_grab": "/ride/grab";
    "ride_order": "/ride/order";
    "ride_profile": "/ride/profile";
    "ride_review": "/ride/review";
    "system": "/system";
    "system_about": "/system/about";
    "system_home": "/system/home";
    "system_manage": "/system/manage";
    "system_manage_driver": "/system/manage/driver";
    "system_manage_log": "/system/manage/log";
    "system_manage_order": "/system/manage/order";
    "system_manage_passenger": "/system/manage/passenger";
    "system_manage_review": "/system/manage/review";
    "system_plugin": "/system/plugin";
    "system_plugin_barcode": "/system/plugin/barcode";
    "system_plugin_charts": "/system/plugin/charts";
    "system_plugin_charts_antv": "/system/plugin/charts/antv";
    "system_plugin_charts_echarts": "/system/plugin/charts/echarts";
    "system_plugin_charts_vchart": "/system/plugin/charts/vchart";
    "system_plugin_copy": "/system/plugin/copy";
    "system_plugin_editor": "/system/plugin/editor";
    "system_plugin_editor_markdown": "/system/plugin/editor/markdown";
    "system_plugin_editor_quill": "/system/plugin/editor/quill";
    "system_plugin_excel": "/system/plugin/excel";
    "system_plugin_gantt": "/system/plugin/gantt";
    "system_plugin_gantt_dhtmlx": "/system/plugin/gantt/dhtmlx";
    "system_plugin_gantt_vtable": "/system/plugin/gantt/vtable";
    "system_plugin_icon": "/system/plugin/icon";
    "system_plugin_map": "/system/plugin/map";
    "system_plugin_pdf": "/system/plugin/pdf";
    "system_plugin_pinyin": "/system/plugin/pinyin";
    "system_plugin_print": "/system/plugin/print";
    "system_plugin_swiper": "/system/plugin/swiper";
    "system_plugin_tables": "/system/plugin/tables";
    "system_plugin_tables_vtable": "/system/plugin/tables/vtable";
    "system_plugin_typeit": "/system/plugin/typeit";
    "system_plugin_video": "/system/plugin/video";
    "system_user-center": "/system/user-center";
  };

  /**
   * route key
   */
  export type RouteKey = keyof RouteMap;

  /**
   * route path
   */
  export type RoutePath = RouteMap[RouteKey];

  /**
   * custom route key
   */
  export type CustomRouteKey = Extract<
    RouteKey,
    | "root"
    | "not-found"
    | "exception"
    | "exception_403"
    | "exception_404"
    | "exception_500"
    | "document"
    | "document_project"
    | "document_project-link"
  >;

  /**
   * the generated route key
   */
  export type GeneratedRouteKey = Exclude<RouteKey, CustomRouteKey>;

  /**
   * the first level route key, which contain the layout of the route
   */
  export type FirstLevelRouteKey = Extract<
    RouteKey,
    | "403"
    | "404"
    | "500"
    | "home"
    | "iframe-page"
    | "login"
    | "ride"
    | "system"
  >;

  /**
   * the custom first level route key
   */
  export type CustomFirstLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
    | "exception"
    | "document"
  >;

  /**
   * the last level route key, which has the page file
   */
  export type LastLevelRouteKey = Extract<
    RouteKey,
    | "403"
    | "404"
    | "500"
    | "iframe-page"
    | "login"
    | "home"
    | "ride_carpool"
    | "ride_grab"
    | "ride_order"
    | "ride_profile"
    | "ride_review"
    | "system_about"
    | "system_home"
    | "system_manage_driver"
    | "system_manage_log"
    | "system_manage_order"
    | "system_manage_passenger"
    | "system_manage_review"
    | "system_plugin_barcode"
    | "system_plugin_charts_antv"
    | "system_plugin_charts_echarts"
    | "system_plugin_charts_vchart"
    | "system_plugin_copy"
    | "system_plugin_editor_markdown"
    | "system_plugin_editor_quill"
    | "system_plugin_excel"
    | "system_plugin_gantt_dhtmlx"
    | "system_plugin_gantt_vtable"
    | "system_plugin_icon"
    | "system_plugin_map"
    | "system_plugin_pdf"
    | "system_plugin_pinyin"
    | "system_plugin_print"
    | "system_plugin_swiper"
    | "system_plugin_tables_vtable"
    | "system_plugin_typeit"
    | "system_plugin_video"
    | "system_user-center"
  >;

  /**
   * the custom last level route key
   */
  export type CustomLastLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
    | "exception_403"
    | "exception_404"
    | "exception_500"
    | "document_project"
    | "document_project-link"
  >;

  /**
   * the single level route key
   */
  export type SingleLevelRouteKey = FirstLevelRouteKey & LastLevelRouteKey;

  /**
   * the custom single level route key
   */
  export type CustomSingleLevelRouteKey = CustomFirstLevelRouteKey & CustomLastLevelRouteKey;

  /**
   * the first level route key, but not the single level
  */
  export type FirstLevelRouteNotSingleKey = Exclude<FirstLevelRouteKey, SingleLevelRouteKey>;

  /**
   * the custom first level route key, but not the single level
   */
  export type CustomFirstLevelRouteNotSingleKey = Exclude<CustomFirstLevelRouteKey, CustomSingleLevelRouteKey>;

  /**
   * the center level route key
   */
  export type CenterLevelRouteKey = Exclude<GeneratedRouteKey, FirstLevelRouteKey | LastLevelRouteKey>;

  /**
   * the custom center level route key
   */
  export type CustomCenterLevelRouteKey = Exclude<CustomRouteKey, CustomFirstLevelRouteKey | CustomLastLevelRouteKey>;

  /**
   * the center level route key
   */
  type GetChildRouteKey<K extends RouteKey, T extends RouteKey = RouteKey> = T extends `${K}_${infer R}`
    ? R extends `${string}_${string}`
      ? never
      : T
    : never;

  /**
   * the single level route
   */
  type SingleLevelRoute<K extends SingleLevelRouteKey = SingleLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}$view.${K}`;
      }
    : never;

  /**
   * the last level route
   */
  type LastLevelRoute<K extends GeneratedRouteKey> = K extends LastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `view.${K}`;
      }
    : never;
  
  /**
   * the center level route
   */
  type CenterLevelRoute<K extends GeneratedRouteKey> = K extends CenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the multi level route
   */
  type MultiLevelRoute<K extends FirstLevelRouteNotSingleKey = FirstLevelRouteNotSingleKey> = K extends string
    ? ElegantConstRoute & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}`;
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;
  
  /**
   * the custom first level route
   */
  type CustomSingleLevelRoute<K extends CustomFirstLevelRouteKey = CustomFirstLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `layout.${RouteLayout}$view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom last level route
   */
  type CustomLastLevelRoute<K extends CustomRouteKey> = K extends CustomLastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom center level route
   */
  type CustomCenterLevelRoute<K extends CustomRouteKey> = K extends CustomCenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the custom multi level route
   */
  type CustomMultiLevelRoute<K extends CustomFirstLevelRouteNotSingleKey = CustomFirstLevelRouteNotSingleKey> =
    K extends string
      ? ElegantConstRoute & {
          name: K;
          path: RouteMap[K];
          component: `layout.${RouteLayout}`;
          children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
        }
      : never;

  /**
   * the custom route
   */
  type CustomRoute = CustomSingleLevelRoute | CustomMultiLevelRoute;

  /**
   * the generated route
   */
  type GeneratedRoute = SingleLevelRoute | MultiLevelRoute;

  /**
   * the elegant route
   */
  type ElegantRoute = GeneratedRoute | CustomRoute;
}
